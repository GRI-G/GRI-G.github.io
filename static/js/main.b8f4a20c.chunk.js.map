{"version":3,"sources":["components/UI/atoms/HeaderMainTitle.tsx","config/messages.ts","components/UI/atoms/HeaderSubTitle.tsx","components/UI/molecules/HeaderText.tsx","components/UI/atoms/Linking.tsx","components/UI/molecules/HeaderDescription.tsx","config/information.ts","components/UI/organisms/Header.tsx","type/user.ts","config/ranking.ts","util/ranking.ts","util/strings.ts","components/UI/atoms/CriteraA.tsx","components/UI/molecules/RankingCriteriaList.tsx","components/UI/atoms/RankingHeadText.tsx","components/UI/molecules/RankingHead.tsx","components/UI/atoms/DescriptionContent.tsx","components/UI/atoms/NameComponent.tsx","components/UI/atoms/RankingComponent.tsx","components/UI/atoms/RankingProfile.tsx","components/UI/molecules/UserList.tsx","components/UI/organisms/RankingList.tsx","components/pages/Ranking.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TitleMessage","styled","h1","HeaderTitle","SubTitleMessage","h2","Title","div","HeaderText","HeaderMainTitle","HeaderSubTitle","Description","a","HeaderLink","props","href","link","text","p","HeaderTag","header","Header","HeaderDescription","UserRankingCriteria","UserRankingCriteriaList","getGraphQLRankingQuery","criteria","getUserInformCriteria","rankingCriteria","rankingCount","rankingPage","getUserInformAtGraphQL","axios","method","url","data","query","result","ranking","sort","b","capitalize","str","charAt","toUpperCase","slice","NavCriteriaA","selected","css","CriteriaA","onClick","onClickEvent","RankingCriteriaListRightLine","RankingCriteriaList","React","Children","map","CriteraA","RankingHeadTexts","th","RankingHeadInnerText","span","RankingHeadText","TextRows","tr","RankingHead","headText","DescriptionContainer","td","DescriptionContents","DescriptionSubContents","DescriptionContent","bio","public_repos","NameComponents","Names","NameDescriptions","NameComponent","name","generation","RankingComponents","RankingComponent","content","RankingProfileContainer","RankingProfileTag","img","RankingProfile","src","UserBlock","tbody","User","UserList","users","rankings","user","idx","nickname","avatar_url","MainContent","main","RankingCriteriaListContainer","nav","RankingContent","section","RankingTable","table","RankingList","useState","setCriteria","setRanking","useEffect","then","res","criterias","RankingPage","App","Ranking","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b8f4a20c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\nimport { mainTitle } from \"../../../config/messages\";\r\n\r\nconst TitleMessage = styled.h1`\r\n  margin : 0;\r\n  font-size : 2.5em;  \r\n`;\r\n\r\nconst HeaderTitle: React.FC = () => {\r\n  return (\r\n    <>\r\n      <TitleMessage>{mainTitle}</TitleMessage>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HeaderTitle;\r\n","export const mainTitle: string = \"GRIG\";\r\nexport const subTitle: string = \"Github Rank In GSM\";\r\nexport const description: string = `\r\n깃헙의 다양한 요소들로 랭킹을 세워봄으로써, 학생들이 깃헙에 더 관심을 갖도록 하기위해 제작되었습니다.\r\nGSM을 거쳤거나, 재학 중인 사람들의 각 요소별 깃헙 랭킹을 표시합니다.\r\n`;\r\n","import styled from \"styled-components\";\r\nimport {  subTitle } from \"../../../config/messages\";\r\nconst SubTitleMessage = styled.h2`\r\n    margin: 0;\r\n    font-size : 1.5em;\r\n`;\r\nconst HeaderTitle: React.FC = () => {\r\n  return (\r\n    <>\r\n      <SubTitleMessage>{subTitle}</SubTitleMessage>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HeaderTitle;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport HeaderMainTitle from \"../atoms/HeaderMainTitle\";\r\nimport HeaderSubTitle from \"../atoms/HeaderSubTitle\";\r\n\r\nconst Title = styled.div`\r\n  text-align : center;\r\n  color: #DB7770;\r\n`;\r\nconst HeaderText: React.FC = (): JSX.Element => {\r\n  return <>\r\n          <Title>\r\n            <HeaderMainTitle />\r\n            <HeaderSubTitle />\r\n          </Title>\r\n        </>;\r\n};\r\n\r\nexport default HeaderText;\r\n","import styled from \"styled-components\";\r\n\r\nconst Description = styled.a`\r\n`;\r\n\r\nconst HeaderLink: React.FC<{text : string, link : string}> = (props) => {\r\n  return (\r\n    <>\r\n      <Description href={props.link}>{props.text}</Description>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HeaderLink;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { issueLink, repoOwner, signinLink } from \"../../../config/information\";\r\nimport { description } from \"../../../config/messages\";\r\nimport HeaderLink from \"../atoms/Linking\";\r\n\r\nimport \"../../../font/SeoulHangangM.css\";\r\n\r\nconst Description = styled.p`\r\n  text-align : left;\r\n  font-family : SeoulHangangM;\r\n  white-space: pre-wrap;\r\n\r\n  display: block;\r\n  width: 70%;\r\n  padding-left: 25%;\r\n  margin: 0 auto;\r\n\r\n  color : #777777;\r\n  font-size: 120%;\r\n  line-height : 1.5em;\r\n`;\r\n\r\nconst HeaderText: React.FC = (): JSX.Element => {\r\n  return <>\r\n          <Description>\r\n            {description}\r\n            피드백 요청이나 버그 제보는 <HeaderLink text={\"여기\"} link={issueLink}/>로 이슈를 남기거나, <HeaderLink text={\"해당 사이트 소유자\"} link={repoOwner}/>에게 연락 부탁드립니다.\r\n            <br/>\r\n            만약 랭킹에 등록하고싶으시다면 <HeaderLink text={\"여기\"} link={signinLink}/>를 눌러주세요!!\r\n          </Description>\r\n        </>;\r\n};\r\n\r\nexport default HeaderText;\r\n","export const issueLink : string = \"https://github.com/sunrabbit123/GRIG/issues/new\";\r\nexport const repoOwner : string =\"https://github.com/sunrabbit123\";\r\nexport const signinLink : string = \"https://github.com/login/oauth/authorize?client_id=685ffb52e4dd768b3f66&redirect_uri=https://d6ui2fy5uj.execute-api.ap-northeast-2.amazonaws.com/api/auth&scope=user:email\";","import styled from \"styled-components\";\r\n\r\nimport HeaderText from \"../molecules/HeaderText\"\r\nimport HeaderDescription from \"../molecules/HeaderDescription\";\r\n\r\nimport \"../../../font/SeoulHangangM.css\";\r\n\r\nconst HeaderTag = styled.header`\r\n    margin-top : 3em;\r\n`;\r\n\r\nconst Header: React.FC = () => {\r\n    return <HeaderTag>\r\n            <HeaderText/>\r\n            <HeaderDescription/>\r\n           </HeaderTag>;\r\n}\r\nexport default Header;","export interface GraphQLVariables {\r\n  [k: string]: string | number;\r\n}\r\nexport interface GraphQLForm {\r\n  query: string;\r\n  variables: GraphQLVariables;\r\n}\r\n\r\nexport interface UserInform {\r\n  name: string;\r\n  nickname: string;\r\n  generation: number;\r\n  public_repos: number;\r\n  bio: string;\r\n  avatar_url: string;\r\n\r\n  stared?: number;\r\n  contributions?: number;\r\n  following?: number;\r\n  followers?: number;\r\n  forked?: number;\r\n  issues?: number;\r\n  pullRequests?: number;\r\n}\r\n\r\nexport interface UserRanking {\r\n  rankings: UserInform[];\r\n  criteria: UserRankingCriteria;\r\n}\r\nexport const UserRankingCriteria = {\r\n  stared: \"stared\",\r\n  contributions: \"contributions\",\r\n  following: \"following\",\r\n  followers: \"followers\",\r\n  forked: \"forked\",\r\n  issues: \"issues\",\r\n  pullRequests: \"pullRequests\",\r\n} as const;\r\n\r\nexport type UserRankingCriteria =\r\n  typeof UserRankingCriteria[keyof typeof UserRankingCriteria];\r\n\r\nexport const UserRankingCriteriaList: string[] = [\r\n  \"contributions\",\r\n  \"stared\",\r\n  \"following\",\r\n  \"followers\",\r\n  \"forked\",\r\n  \"issues\",\r\n  \"pullRequests\",\r\n];\r\n","import { GraphQLVariables } from \"../type/user\";\r\n\r\nexport const getRankingApiUrl: string =\r\n  \"https://d6ui2fy5uj.execute-api.ap-northeast-2.amazonaws.com/api/graphql\";\r\n\r\nexport const getGraphQLRankingQuery: Function = (criteria: string) => `\r\nquery getUserRankingQuery($rankingCriteria: String, $rankingCount: Int, $rankingPage: Int) {\r\n  ranking(criteria: $rankingCriteria, count: $rankingCount, page: $rankingPage) {\r\n    name\r\n    generation\r\n    nickname\r\n    bio\r\n    public_repos\r\n    avatar_url\r\n\r\n    ${criteria}\r\n  }\r\n}\r\n`;\r\n\r\nexport const getUserInformCriteria: Function = (\r\n  criteria: string\r\n): GraphQLVariables => {\r\n  return {\r\n    rankingCriteria: criteria,\r\n    rankingCount: 100,\r\n    rankingPage: 1,\r\n  };\r\n};\r\n","import { UserInform, UserRankingCriteria } from \"../type/user\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport {\r\n  getGraphQLRankingQuery,\r\n  getRankingApiUrl,\r\n  getUserInformCriteria,\r\n} from \"../config/ranking\";\r\n\r\nexport const getUserInformAtGraphQL: Function = async (\r\n  criteria: UserRankingCriteria\r\n): Promise<UserInform[]> => {\r\n  const result: AxiosResponse = await axios({\r\n    method: \"POST\",\r\n    url: getRankingApiUrl,\r\n    data: {\r\n      query: getGraphQLRankingQuery(criteria),\r\n      criteria: getUserInformCriteria(criteria),\r\n    },\r\n  });\r\n  return result.data.data.ranking.sort((a: any, b: any) =>\r\n    a[criteria] < b[criteria] ? 1 : -1\r\n  );\r\n};\r\n","export const capitalize: Function = (str: string): string => {\r\n  return str.charAt(0).toUpperCase() + str.slice(1);\r\n};\r\n","import styled, { css } from \"styled-components\";\r\nimport { capitalize } from \"../../../util/strings\";\r\n\r\nconst NavCriteriaA = styled.a<{selected : string, text : string}>`\r\n  display: block;\r\n  width: 8em;\r\n  position: relative;\r\n  margin : 0 0 4rem 0;\r\n  cursor : pointer;\r\n  &:hover {\r\n    font-weight: 600;\r\n  }\r\n  ${(props : any) => props.selected !== props.text ? css`` : css`\r\n    font-weight: 600;\r\n  `}\r\n`;\r\n\r\nconst CriteriaA: React.FC<{ text: string; onClickEvent: Function, selected: string }> = (\r\n  props\r\n) => {\r\n  return (\r\n    <>\r\n      <NavCriteriaA onClick={() => props.onClickEvent(props.text)} selected={props.selected} text={props.text}>\r\n        {capitalize(props.text)}\r\n      </NavCriteriaA>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CriteriaA;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { UserRankingCriteriaList } from \"../../../type/user\";\r\nimport CriteraA from \"../atoms/CriteraA\";\r\n\r\n\r\nconst RankingCriteriaListRightLine = styled.div`\r\n  position: absolute;\r\n  right 0;\r\n  top : -1em;\r\n  background-color : #DB7770;\r\n  color : #DB7770;\r\n  width: 20px;\r\n  border-radius : 30px;\r\n  padding-bottom : 35rem;\r\n`;\r\n\r\nconst RankingCriteriaList: React.FC<{ onClickEvent: Function, selected: string }> = (props) => {\r\n  return (\r\n    <>\r\n      {React.Children.map(UserRankingCriteriaList, (criteria) => ( \r\n        <CriteraA text={criteria} onClickEvent={props.onClickEvent} selected={props.selected}></CriteraA>\r\n      ))}\r\n      <RankingCriteriaListRightLine ></RankingCriteriaListRightLine>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RankingCriteriaList;\r\n","import styled from \"styled-components\";\r\n\r\nconst RankingHeadTexts = styled.th<{text : string }>`\r\n  padding: 1.2rem 2rem 1.2rem 1rem;\r\n  text-align : ${(props : any) => props.text === 'Profile' ? 'center' : 'left'}\r\n`;\r\n\r\n\r\nconst RankingHeadInnerText = styled.span`\r\n  font-size: 1.15em;\r\n`;\r\n\r\nconst RankingHeadText: React.FC<{ text: string }> = (props) => {\r\n  return (\r\n    <>\r\n      <RankingHeadTexts text={props.text}>\r\n        <RankingHeadInnerText>\r\n          {props.text}\r\n        </RankingHeadInnerText>\r\n      </RankingHeadTexts>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RankingHeadText;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { capitalize } from \"../../../util/strings\";\r\nimport RankingHeadText from \"../atoms/RankingHeadText\";\r\n\r\nconst TextRows = styled.tr``;\r\n\r\nconst RankingHead: React.FC<{ criteria: string }> = (props) => {\r\n  const headText: string[] = [\r\n    \"   \",\r\n    \"Name\",\r\n    capitalize(props.criteria),\r\n    \"Profile\",\r\n    \"Bio\",\r\n  ];\r\n  return (\r\n    <>\r\n      <thead>\r\n        <TextRows>\r\n          {React.Children.map(headText, (headText) => (\r\n            <RankingHeadText text={headText} />\r\n          ))}\r\n        </TextRows>\r\n      </thead>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RankingHead;\r\n","import styled from \"styled-components\";\r\n\r\nconst DescriptionContainer = styled.td`\r\n  border-bottom: 0.1rem solid #e1e1e1;\r\n  padding: 1.2rem 1.4rem 1.2rem 1rem;\r\n`;\r\nconst DescriptionContents = styled.p`\r\n  margin-bottom : 0;\r\n`;\r\nconst DescriptionSubContents = styled.p`\r\n  margin-top : 0.2em;\r\n  color: #666666;\r\n  font-size : 80%;\r\n`;\r\n\r\nconst DescriptionContent: React.FC<{bio : string, public_repos: number,  }> = (props) => {\r\n  return (\r\n    <DescriptionContainer>\r\n      <DescriptionContents>{props.bio || \"현재 bio가 등록되어있지 않아요!\"}</DescriptionContents>\r\n      <DescriptionSubContents>{props.public_repos} public_repos</DescriptionSubContents>\r\n    </DescriptionContainer>\r\n  );\r\n};\r\n\r\nexport default DescriptionContent;\r\n","import styled from \"styled-components\";\r\n\r\nconst NameComponents = styled.td`\r\n  border-bottom: 0.1rem solid #e1e1e1;\r\n  padding: 1.2rem 1.5rem 1.2rem 1rem;\r\n\r\n`;\r\nconst Names = styled.p`\r\n  margin-bottom : 0;\r\n  color: #DB7770;\r\n  font-weight: 800;\r\n`;\r\nconst NameDescriptions = styled.td`\r\n  color : #666666;\r\n  font-size : 1rem;\r\n`;\r\n\r\nconst NameComponent: React.FC<{ name : string, generation: number }> = (props) => {\r\n  return (\r\n    <NameComponents>\r\n      <Names>{props.name}</Names>\r\n      <NameDescriptions>{props.generation}기</NameDescriptions>\r\n    </NameComponents>\r\n  );\r\n};\r\n\r\nexport default NameComponent;\r\n","import styled from \"styled-components\";\r\n\r\nconst RankingComponents = styled.td`\r\n  border-bottom: 0.1rem solid #e1e1e1;\r\n  padding: 1.2rem 1.4rem 1.2rem 1rem;\r\n`;\r\n\r\nconst RankingComponent: React.FC<{ content: number | string | undefined }> = (props) => {\r\n  return (\r\n    <>\r\n      <RankingComponents>{props.content}</RankingComponents>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RankingComponent;\r\n","import styled from \"styled-components\";\r\n\r\nconst RankingProfileContainer = styled.td`\r\n  border-bottom: 0.1rem solid #e1e1e1;\r\n  padding: 1.2rem 1.5rem 1.2rem 1rem;\r\n`;\r\nconst RankingProfileTag = styled.img`\r\n  border-radius: 50%;\r\n  height : 100px;\r\n  width : 100px;\r\n`;\r\n\r\nconst RankingProfile: React.FC<{ link: string }> = (props) => {\r\n  return (\r\n    <RankingProfileContainer>\r\n      <RankingProfileTag src={props.link ?? \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png\"} />\r\n    </RankingProfileContainer>\r\n  );\r\n};\r\n\r\nexport default RankingProfile;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { UserRanking } from \"../../../type/user\";\r\nimport DescriptionContent from \"../atoms/DescriptionContent\";\r\nimport NameComponent from \"../atoms/NameComponent\";\r\nimport RankingComponent from \"../atoms/RankingComponent\";\r\nimport RankingProfile from \"../atoms/RankingProfile\";\r\n\r\nconst UserBlock = styled.tbody``;\r\nconst User = styled.tr`\r\n  padding: 1.4rem 0rem 1.4rem 0rem;\r\n`;\r\n\r\nconst UserList: React.FC<UserRanking> = (props) => {\r\n  const users = props.rankings;\r\n  return (\r\n    <UserBlock>\r\n      {users.map((user, idx) => (\r\n        <User>\r\n          <RankingComponent content={idx + 1} />\r\n          <NameComponent\r\n            name={`${user.name}(${user.nickname})`}\r\n            generation={user.generation}\r\n          />\r\n          <RankingComponent content={user[props.criteria]} />\r\n          <RankingProfile link={user.avatar_url} />\r\n          <DescriptionContent bio={user.bio} public_repos={user.public_repos} />\r\n        </User>\r\n      ))}\r\n    </UserBlock>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","import { useEffect, useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { UserInform, UserRankingCriteria } from \"../../../type/user\";\r\nimport { getUserInformAtGraphQL } from \"../../../util/ranking\";\r\nimport RankingCriteriaList from \"../molecules/RankingCriteriaList\";\r\nimport RankingHead from \"../molecules/RankingHead\";\r\nimport UserList from \"../molecules/UserList\";\r\n\r\nimport \"../../../font/SeoulHangangM.css\";\r\n\r\nconst MainContent = styled.main`\r\n  font-family: SeoulHangangM;\r\n\r\n  max-width: 80em;\r\n  width: 100%;\r\n  display: flex;\r\n  margin: 0 auto;\r\n  padding-top: 30px;\r\n\r\n  font-size: 1.2em;\r\n`; // 추후 글로벌 컴포넌트로 빼기\r\n\r\nconst RankingCriteriaListContainer = styled.nav`\r\n  display: block;\r\n  position: sticky;\r\n  top: 100px;\r\n  margin-top: 4rem;\r\n  height: 525px;\r\n  width: 10em;\r\n`;\r\n\r\nconst RankingContent = styled.section`\r\n  display: block;\r\n  width: 80%;\r\n  padding-left: 3em;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst RankingTable = styled.table`\r\n  text-align: left;\r\n`;\r\n\r\nconst RankingList: React.FC = () => {\r\n  const [criteria, setCriteria] = useState<UserRankingCriteria>(\r\n    UserRankingCriteria.contributions\r\n  );\r\n  const [ranking, setRanking] = useState<UserInform[]>([]);\r\n\r\n  const onClickCriteria = (criterias: UserRankingCriteria) => {\r\n    setCriteria(criterias);\r\n  };\r\n  const updateRanking = (criterias: UserRankingCriteria) => {\r\n    getUserInformAtGraphQL(criterias).then((res: UserInform[]) => {\r\n      setRanking(res);\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    updateRanking(criteria);\r\n  }, [criteria]);\r\n\r\n  return (\r\n    <MainContent>\r\n      <RankingCriteriaListContainer>\r\n        <RankingCriteriaList\r\n          onClickEvent={onClickCriteria}\r\n          selected={criteria}\r\n        />\r\n      </RankingCriteriaListContainer>\r\n      <RankingContent>\r\n        <RankingTable>\r\n          <RankingHead criteria={criteria} />\r\n          <UserList rankings={ranking} criteria={criteria} />\r\n        </RankingTable>\r\n      </RankingContent>\r\n    </MainContent>\r\n  );\r\n};\r\n\r\nexport default RankingList;\r\n","import Header from \"../UI/organisms/Header\";\r\nimport RankingList from \"../UI/organisms/RankingList\";\r\n\r\nconst RankingPage: React.FC = () => {\r\n  return (\r\n    <>\r\n      <Header></Header>\r\n      <RankingList />\r\n      <footer></footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RankingPage;\r\n","import React from \"react\";\r\nimport Ranking from \"./components/pages/Ranking\";\r\n\r\nfunction App() {\r\n  return (\r\n    <>\r\n      <Ranking />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}