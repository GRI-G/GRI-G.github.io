{"version":3,"sources":["components/UI/atoms/HeaderMainTitle.tsx","config/messages.ts","components/UI/atoms/HeaderSubTitle.tsx","components/UI/molecules/HeaderText.tsx","components/UI/atoms/Linking.tsx","components/UI/molecules/HeaderDescription.tsx","config/information.ts","components/UI/organisms/Header.tsx","type/user.ts","config/ranking.ts","util/ranking.ts","util/strings.ts","components/UI/atoms/CriteraA.tsx","components/UI/molecules/RankingCriteriaList.tsx","components/UI/atoms/RankingHeadText.tsx","components/UI/molecules/RankingHead.tsx","components/UI/atoms/DescriptionContent.tsx","components/UI/atoms/NameComponent.tsx","components/UI/atoms/RankingComponent.tsx","components/UI/atoms/RankingProfile.tsx","components/UI/molecules/UserList.tsx","components/UI/atoms/GenerationA.tsx","components/UI/molecules/RankingKindOfGeneration.tsx","components/UI/organisms/RankingList.tsx","components/pages/Ranking.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TitleMessage","styled","h1","HeaderTitle","SubTitleMessage","h2","Title","div","HeaderText","HeaderMainTitle","HeaderSubTitle","Description","a","HeaderLink","props","href","link","text","p","HeaderTag","header","Header","HeaderDescription","UserRankingCriteria","UserRankingCriteriaList","getRankingApiUrl","getGraphQLRankingQuery","criteria","getUserInformCriteria","generation","rankingCriteria","rankingCount","rankingPage","getUserInformAtGraphQL","generationValue","axios","method","url","data","query","variables","result","ranking","sort","b","getGenerationsInformAtGraphQL","generations","capitalize","str","charAt","toUpperCase","slice","NavCriteriaA","selected","css","CriteriaA","onClick","onClickEvent","RankingCriteriaListBlock","ul","RankingCriteria","li","RankingCriteriaList","React","Children","map","CriteraA","RankingHeadTexts","th","RankingHeadInnerText","span","RankingHeadText","TextRows","tr","RankingHead","headText","DescriptionContainer","td","DescriptionContents","DescriptionSubContents","DescriptionContent","bio","public_repos","NameComponents","LinkComponent","Names","NameDescriptions","NameComponent","name","RankingComponents","RankingComponent","content","RankingProfileContainer","RankingProfileTag","img","RankingProfile","src","UserBlock","tbody","User","UserList","users","rankings","user","idx","nickname","avatar_url","NavGenerationA","GenerationA","generationInform","_id","count","GenerationListBlock","GenerationListComponent","GenerationList","useState","generationList","setGenerationList","useEffect","then","res","inform","MainContent","main","RankingCriteriaListContainer","nav","RankingContent","section","RankingTable","table","RankingCriteriaListRightLine","RankingList","setCriteria","generationStatus","setGeneration","setRanking","RankingKindOfGeneration","criterias","RankingPage","App","Ranking","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3e0b8b6a.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport { mainTitle } from \"../../../config/messages\";\n\nconst TitleMessage = styled.h1`\n  margin: 0;\n  font-size: 2.1em;\n`;\n\nconst HeaderTitle: React.FC = () => {\n  return (\n    <>\n      <TitleMessage>{mainTitle}</TitleMessage>\n    </>\n  );\n};\n\nexport default HeaderTitle;\n","export const mainTitle: string = \"GRIG\";\nexport const subTitle: string = \"Github Rank In GSM\";\nexport const description: string = `\n깃헙의 다양한 요소들로 랭킹을 세워봄으로써, 학생들이 깃헙에 더 관심을 갖도록 하기위해 제작되었습니다.\nGSM을 거쳤거나, 재학 중인 사람들의 각 요소별 깃헙 랭킹을 표시합니다.\n`;\n","import styled from \"styled-components\";\nimport { subTitle } from \"../../../config/messages\";\nconst SubTitleMessage = styled.h2`\n  margin: 0;\n  font-size: 1.3em;\n`;\nconst HeaderTitle: React.FC = () => {\n  return (\n    <>\n      <SubTitleMessage>{subTitle}</SubTitleMessage>\n    </>\n  );\n};\n\nexport default HeaderTitle;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport HeaderMainTitle from \"../atoms/HeaderMainTitle\";\nimport HeaderSubTitle from \"../atoms/HeaderSubTitle\";\n\nconst Title = styled.div`\n  text-align : center;\n  color: #DB7770;\n`;\nconst HeaderText: React.FC = (): JSX.Element => {\n  return <>\n          <Title>\n            <HeaderMainTitle />\n            <HeaderSubTitle />\n          </Title>\n        </>;\n};\n\nexport default HeaderText;\n","import styled from \"styled-components\";\n\nconst Description = styled.a`\n  color: #db7770;\n`;\n\nconst HeaderLink: React.FC<{ text: string; link: string }> = (props) => {\n  return (\n    <>\n      <Description href={props.link}>{props.text}</Description>\n    </>\n  );\n};\n\nexport default HeaderLink;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { issueLink, repoOwner, signinLink } from \"../../../config/information\";\nimport { description } from \"../../../config/messages\";\nimport HeaderLink from \"../atoms/Linking\";\n\nimport \"../../../font/SeoulHangangM.css\";\n\nconst Description = styled.p`\n  text-align: left;\n  font-family: SeoulHangangM;\n  white-space: pre-wrap;\n\n  display: block;\n  width: 70%;\n  padding-left: 30%;\n  margin: 0 auto;\n\n  color: #777777;\n  font-size: 108%;\n  line-height: 1.5em;\n`;\n\nconst HeaderText: React.FC = (): JSX.Element => {\n  return (\n    <>\n      <Description>\n        {description}\n        피드백 요청이나 버그 제보는{\" \"}\n        <HeaderLink text={\"여기\"} link={issueLink} />로 이슈를 남기거나,{\" \"}\n        <HeaderLink text={\"해당 사이트 소유자\"} link={repoOwner} />\n        에게 연락 부탁드립니다.\n        <br />\n        만약 랭킹에 등록하고싶으시다면{\" \"}\n        <HeaderLink text={\"여기\"} link={signinLink} />를 눌러주세요!!\n      </Description>\n    </>\n  );\n};\n\nexport default HeaderText;\n","export const issueLink : string = \"https://github.com/GRI-G/issues/new\";\nexport const repoOwner : string =\"https://github.com/sunrabbit123\";\nexport const signinLink : string = \"https://github.com/login/oauth/authorize?client_id=685ffb52e4dd768b3f66&redirect_uri=https://d6ui2fy5uj.execute-api.ap-northeast-2.amazonaws.com/api/auth&scope=user:email\";\n","import styled from \"styled-components\";\n\nimport HeaderText from \"../molecules/HeaderText\"\nimport HeaderDescription from \"../molecules/HeaderDescription\";\n\nimport \"../../../font/SeoulHangangM.css\";\n\nconst HeaderTag = styled.header`\n    margin-top : 3em;\n`;\n\nconst Header: React.FC = () => {\n    return <HeaderTag>\n            <HeaderText/>\n            <HeaderDescription/>\n           </HeaderTag>;\n}\nexport default Header;","export interface GraphQLVariables {\n  [k: string]: string | number;\n}\nexport interface GraphQLForm {\n  query: string;\n  variables: GraphQLVariables;\n}\n\nexport interface UserInform {\n  name: string;\n  nickname: string;\n  generation: number;\n  public_repos: number;\n  bio: string;\n  avatar_url: string;\n\n  stared?: number;\n  contributions?: number;\n  following?: number;\n  followers?: number;\n  forked?: number;\n  issues?: number;\n  pullRequests?: number;\n}\n\nexport interface UserRanking {\n  rankings: UserInform[];\n  criteria: UserRankingCriteriaType;\n}\nexport const UserRankingCriteria = {\n  stared: \"stared\",\n  contributions: \"contributions\",\n  following: \"following\",\n  followers: \"followers\",\n  forked: \"forked\",\n  issues: \"issues\",\n  pullRequests: \"pullRequests\",\n} as const;\n\nexport type UserRankingCriteriaType =\n  typeof UserRankingCriteria[keyof typeof UserRankingCriteria];\n\nexport const UserRankingCriteriaList: string[] = [\n  \"contributions\",\n  \"stared\",\n  \"following\",\n  \"followers\",\n  \"forked\",\n  \"issues\",\n  \"pullRequests\",\n];\n\nexport interface GenerationsListAndCount {\n  _id: number;\n  count: number;\n}\n","import { GraphQLVariables } from \"../type/user\";\n\nexport const getRankingApiUrl: string =\n  \"https://d6ui2fy5uj.execute-api.ap-northeast-2.amazonaws.com/api/graphql\";\n\nexport const getGraphQLRankingQuery: Function = (criteria: string) => `\nquery getUserRankingQuery($rankingCriteria: String, $rankingPage: Int, $rankingCount: Int, $generation: Int) {\n  ranking(criteria: $rankingCriteria, page: $rankingPage, count: $rankingCount, generation : $generation){\n      name\n      generation\n      nickname\n      bio\n      public_repos\n      avatar_url\n      ${criteria}\n  }\n}\n\n`;\n\nexport const getUserInformCriteria: Function = (\n  criteria: string,\n  generation: number\n): GraphQLVariables => {\n  return {\n    rankingCriteria: criteria,\n    rankingCount: 100,\n    rankingPage: 1,\n    generation,\n  };\n};\n\nexport const getGraphQLGenerationQuery: Function = () => `\nquery getGenerationListQuery{\n  generations{\n    _id\n    count\n  }\n}\n`;\n","import {\n  GenerationsListAndCount,\n  UserInform,\n  UserRankingCriteriaType,\n} from \"../type/user\";\nimport axios, { AxiosResponse } from \"axios\";\nimport {\n  getGraphQLGenerationQuery,\n  getGraphQLRankingQuery,\n  getRankingApiUrl,\n  getUserInformCriteria,\n} from \"../config/ranking\";\n\nexport const getUserInformAtGraphQL: Function = async (\n  criteria: UserRankingCriteriaType,\n  generationValue: number\n): Promise<UserInform[]> => {\n  const result: AxiosResponse = await axios({\n    method: \"POST\",\n    url: getRankingApiUrl,\n    data: {\n      query: getGraphQLRankingQuery(criteria),\n      variables: getUserInformCriteria(criteria, generationValue),\n    },\n  });\n  if (!result.data.data.ranking) {\n    return [];\n  }\n  return result.data.data.ranking.sort((a: any, b: any) =>\n    a[criteria] < b[criteria] ? 1 : -1\n  );\n};\n\nexport const getGenerationsInformAtGraphQL: Function = async (): Promise<\n  GenerationsListAndCount[]\n> => {\n  const result: AxiosResponse = await axios({\n    method: \"POST\",\n    url: getRankingApiUrl,\n    data: {\n      query: getGraphQLGenerationQuery(),\n      variables: {},\n    },\n  });\n  return result.data.data.generations ?? [];\n};\n","export const capitalize: Function = (str: string): string => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n};\n","import styled, { css } from \"styled-components\";\nimport { capitalize } from \"../../../util/strings\";\n\nconst NavCriteriaA = styled.a<{selected : string, text : string}>`\n  display: block;\n  width: 8em;\n  position: relative;\n  margin : 0 0 4rem 0;\n  cursor : pointer;\n  &:hover {\n    font-weight: 600;\n  }\n  ${(props : any) => props.selected !== props.text ? css`` : css`\n    font-weight: 600;\n  `}\n`;\n\nconst CriteriaA: React.FC<{ text: string; onClickEvent: Function, selected: string }> = (\n  props\n) => {\n  return (\n    <>\n      <NavCriteriaA onClick={() => props.onClickEvent(props.text)} selected={props.selected} text={props.text}>\n        {capitalize(props.text)}\n      </NavCriteriaA>\n    </>\n  );\n};\n\nexport default CriteriaA;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { UserRankingCriteriaList } from \"../../../type/user\";\nimport CriteraA from \"../atoms/CriteraA\";\n\nconst RankingCriteriaListBlock = styled.ul`\n  display: inline-block;\n  list-style: none;\n  margin: 0px;\n  padding: 0px;\n  right: 0;\n`;\nconst RankingCriteria = styled.li`\n  list-style: none;\n  margin: 0px;\n  padding: 0px;\n`;\n\nconst RankingCriteriaList: React.FC<{\n  onClickEvent: Function;\n  selected: string;\n}> = (props) => {\n  return (\n    <>\n      <RankingCriteriaListBlock>\n        {React.Children.map(UserRankingCriteriaList, (criteria) => (\n          <RankingCriteria>\n            <CriteraA\n              text={criteria}\n              onClickEvent={props.onClickEvent}\n              selected={props.selected}\n            ></CriteraA>\n          </RankingCriteria>\n        ))}\n      </RankingCriteriaListBlock>\n    </>\n  );\n};\n\nexport default RankingCriteriaList;\n","import styled from \"styled-components\";\n\nconst RankingHeadTexts = styled.th<{text : string }>`\n  padding: 1.2rem 2rem 1.2rem 1rem;\n  text-align : ${(props : any) => props.text === 'Profile' ? 'center' : 'left'}\n`;\n\n\nconst RankingHeadInnerText = styled.span`\n  font-size: 1.15em;\n`;\n\nconst RankingHeadText: React.FC<{ text: string }> = (props) => {\n  return (\n    <>\n      <RankingHeadTexts text={props.text}>\n        <RankingHeadInnerText>\n          {props.text}\n        </RankingHeadInnerText>\n      </RankingHeadTexts>\n    </>\n  );\n};\n\nexport default RankingHeadText;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { capitalize } from \"../../../util/strings\";\nimport RankingHeadText from \"../atoms/RankingHeadText\";\n\nconst TextRows = styled.tr``;\n\nconst RankingHead: React.FC<{ criteria: string }> = (props) => {\n  const headText: string[] = [\n    \"   \",\n    \"Name\",\n    capitalize(props.criteria),\n    \"Profile\",\n    \"Bio\",\n  ];\n  return (\n    <>\n      <thead>\n        <TextRows>\n          {React.Children.map(headText, (headText) => (\n            <RankingHeadText text={headText} />\n          ))}\n        </TextRows>\n      </thead>\n    </>\n  );\n};\n\nexport default RankingHead;\n","import styled from \"styled-components\";\n\nconst DescriptionContainer = styled.td`\n  border-bottom: 0.1rem solid #e1e1e1;\n  padding: 1.2rem 1.4rem 1.2rem 1rem;\n`;\nconst DescriptionContents = styled.p`\n  margin-bottom : 0;\n`;\nconst DescriptionSubContents = styled.p`\n  margin-top : 0.2em;\n  color: #666666;\n  font-size : 80%;\n`;\n\nconst DescriptionContent: React.FC<{bio : string, public_repos: number,  }> = (props) => {\n  return (\n    <DescriptionContainer>\n      <DescriptionContents>{props.bio || \"현재 bio가 등록되어있지 않아요!\"}</DescriptionContents>\n      <DescriptionSubContents>{props.public_repos} public_repos</DescriptionSubContents>\n    </DescriptionContainer>\n  );\n};\n\nexport default DescriptionContent;\n","import styled from \"styled-components\";\n\nconst NameComponents = styled.td`\n  border-bottom: 0.1rem solid #e1e1e1;\n  padding: 1.2rem 1.5rem 1.2rem 1rem;\n`;\n\nconst LinkComponent = styled.a`\n  text-decoration: none;\n`;\nconst Names = styled.p`\n  margin-bottom: 0;\n  color: #db7770;\n  font-weight: 800;\n`;\nconst NameDescriptions = styled.td`\n  color: #666666;\n  font-size: 1rem;\n`;\n\nconst NameComponent: React.FC<{\n  name: string;\n  generation: number;\n  link: string;\n}> = (props) => {\n  return (\n    <NameComponents>\n      <LinkComponent href={props.link}>\n        <Names>{props.name}</Names>\n        <NameDescriptions>{props.generation}기</NameDescriptions>\n      </LinkComponent>\n    </NameComponents>\n  );\n};\n\nexport default NameComponent;\n","import styled from \"styled-components\";\n\nconst RankingComponents = styled.td`\n  border-bottom: 0.1rem solid #e1e1e1;\n  padding: 1.2rem 1.4rem 1.2rem 1rem;\n`;\n\nconst RankingComponent: React.FC<{ content: number | string | undefined }> = (props) => {\n  return (\n    <>\n      <RankingComponents>{props.content}</RankingComponents>\n    </>\n  );\n};\n\nexport default RankingComponent;\n","import styled from \"styled-components\";\n\nconst RankingProfileContainer = styled.td`\n  border-bottom: 0.1rem solid #e1e1e1;\n  padding: 1.2rem 1.5rem 1.2rem 1rem;\n`;\nconst RankingProfileTag = styled.img`\n  border-radius: 50%;\n  height : 100px;\n  width : 100px;\n`;\n\nconst RankingProfile: React.FC<{ link: string }> = (props) => {\n  return (\n    <RankingProfileContainer>\n      <RankingProfileTag src={props.link ?? \"https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460__340.png\"} />\n    </RankingProfileContainer>\n  );\n};\n\nexport default RankingProfile;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport { UserRanking } from \"../../../type/user\";\nimport DescriptionContent from \"../atoms/DescriptionContent\";\nimport NameComponent from \"../atoms/NameComponent\";\nimport RankingComponent from \"../atoms/RankingComponent\";\nimport RankingProfile from \"../atoms/RankingProfile\";\n\nconst UserBlock = styled.tbody``;\nconst User = styled.tr`\n  padding: 1.4rem 0rem 1.4rem 0rem;\n`;\n\nconst UserList: React.FC<UserRanking> = (props) => {\n  const users = props.rankings;\n  return (\n    <UserBlock>\n      {users.map((user, idx) => (\n        <User>\n          <RankingComponent content={idx + 1} />\n          <NameComponent\n            name={`${user.name}(${user.nickname})`}\n            generation={user.generation}\n            link={`https://github.com/${user.nickname}`}\n          />\n          <RankingComponent content={user[props.criteria]} />\n          <RankingProfile link={user.avatar_url} />\n          <DescriptionContent bio={user.bio} public_repos={user.public_repos} />\n        </User>\n      ))}\n    </UserBlock>\n  );\n};\n\nexport default UserList;\n","import styled, { css } from \"styled-components\";\nimport { GenerationsListAndCount } from \"../../../type/user\";\n\nconst NavGenerationA = styled.a<{ selected: number; text: number }>`\n  display: block;\n  width: 8em;\n  position: relative;\n  margin: 0 0 4rem 0;\n  cursor: pointer;\n  &:hover {\n    font-weight: 600;\n  }\n  ${(props: any) =>\n    props.selected !== props.text\n      ? css``\n      : css`\n          font-weight: 600;\n        `}\n`;\n\nconst GenerationA: React.FC<{\n  generationInform: GenerationsListAndCount;\n  onClickEvent: Function;\n  selected: number;\n}> = (props) => {\n  return (\n    <>\n      <NavGenerationA\n        onClick={() => props.onClickEvent(props.generationInform._id)}\n        selected={props.selected}\n        text={props.generationInform._id}\n      >\n        {props.generationInform._id !== 0\n          ? `${props.generationInform._id}기 (${props.generationInform.count}명)`\n          : `전체 기수`}\n      </NavGenerationA>\n    </>\n  );\n};\n\nexport default GenerationA;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport { GenerationsListAndCount } from \"../../../type/user\";\nimport { getGenerationsInformAtGraphQL } from \"../../../util/ranking\";\nimport GenerationA from \"../atoms/GenerationA\";\n\ninterface GenerationListProps {\n  selected: number;\n  onClickEvent: Function;\n}\nconst GenerationListBlock = styled.ul`\n  display: inline-block;\n  list-style: none;\n  margin: 0px;\n  padding: 0px;\n`;\nconst GenerationListComponent = styled.li`\n  list-style: none;\n  margin: 0px;\n  padding: 0px;\n`;\n\nconst GenerationList: React.FC<GenerationListProps> = (\n  props: GenerationListProps\n) => {\n  const [generationList, setGenerationList] = useState<\n    GenerationsListAndCount[]\n  >([]);\n\n  function renderGenerationList() {\n    getGenerationsInformAtGraphQL().then((res: GenerationsListAndCount[]) => {\n      setGenerationList([{ _id: 0, count: 0 }, ...res]);\n    });\n  }\n\n  useEffect(() => {\n    renderGenerationList();\n  }, []);\n  return (\n    <GenerationListBlock>\n      {generationList.map((inform: GenerationsListAndCount) => (\n        <GenerationListComponent>\n          <GenerationA\n            generationInform={inform}\n            onClickEvent={props.onClickEvent}\n            selected={props.selected}\n          />\n        </GenerationListComponent>\n      ))}\n    </GenerationListBlock>\n  );\n};\n\nexport default GenerationList;\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport {\n  UserInform,\n  UserRankingCriteria,\n  UserRankingCriteriaType,\n} from \"../../../type/user\";\nimport { getUserInformAtGraphQL } from \"../../../util/ranking\";\nimport RankingCriteriaList from \"../molecules/RankingCriteriaList\";\nimport RankingHead from \"../molecules/RankingHead\";\nimport UserList from \"../molecules/UserList\";\n\nimport \"../../../font/SeoulHangangM.css\";\nimport RankingKindOfGeneration from \"../molecules/RankingKindOfGeneration\";\n\nconst MainContent = styled.main`\n  font-family: SeoulHangangM;\n\n  max-width: 75em;\n  width: 100%;\n  display: flex;\n  margin: 0 auto;\n  padding-top: 30px;\n  margin-left: 8em;\n  font-size: 1.08em;\n`; // 추후 글로벌 컴포넌트로 빼기\n\nconst RankingCriteriaListContainer = styled.nav`\n  position: sticky;\n  display: flex;\n  top: 100px;\n  margin-top: 4rem;\n  height: 525px;\n  width: 20em;\n`;\n\nconst RankingContent = styled.section`\n  display: block;\n  width: 80%;\n  padding-left: 3em;\n  margin: 0 auto;\n`;\n\nconst RankingTable = styled.table`\n  text-align: left;\n`;\n\nconst RankingCriteriaListRightLine = styled.div`\n  position: absolute;\n  right 0;\n  top : -1em;\n  background-color : #DB7770;\n  color : #DB7770;\n  width: 20px;\n  border-radius : 30px;\n  padding-bottom : 35rem;\n`;\n\nconst RankingList: React.FC = () => {\n  const [criteria, setCriteria] = useState<UserRankingCriteriaType>(\n    UserRankingCriteria.contributions\n  );\n  const [generationStatus, setGeneration] = useState<number>(0);\n  const [ranking, setRanking] = useState<UserInform[]>([]);\n\n  const onClickCriteria = (criterias: UserRankingCriteriaType) => {\n    setCriteria(criterias);\n  };\n  const onClickGeneration = (generations: number) => {\n    setGeneration(generations);\n  };\n  const updateRanking = (\n    criterias: UserRankingCriteriaType,\n    generationValue: number\n  ) => {\n    getUserInformAtGraphQL(criterias, generationValue).then(\n      (res: UserInform[]) => {\n        setRanking(res);\n      }\n    );\n  };\n\n  useEffect(() => {\n    updateRanking(criteria, generationStatus);\n  }, [criteria, generationStatus]);\n\n  return (\n    <MainContent>\n      <RankingCriteriaListContainer>\n        <RankingKindOfGeneration\n          onClickEvent={onClickGeneration}\n          selected={generationStatus}\n        />\n        <RankingCriteriaList\n          onClickEvent={onClickCriteria}\n          selected={criteria}\n        />\n        <RankingCriteriaListRightLine />\n      </RankingCriteriaListContainer>\n      <RankingContent>\n        <RankingTable>\n          <RankingHead criteria={criteria} />\n          <UserList rankings={ranking} criteria={criteria} />\n        </RankingTable>\n      </RankingContent>\n    </MainContent>\n  );\n};\n\nexport default RankingList;\n","import Header from \"../UI/organisms/Header\";\nimport RankingList from \"../UI/organisms/RankingList\";\n\nconst RankingPage: React.FC = () => {\n  return (\n    <>\n      <Header></Header>\n      <RankingList />\n      <footer></footer>\n    </>\n  );\n};\n\nexport default RankingPage;\n","import React from \"react\";\nimport Ranking from \"./components/pages/Ranking\";\n\nfunction App() {\n  return (\n    <>\n      <Ranking />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}